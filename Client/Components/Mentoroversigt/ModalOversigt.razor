<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay; overflow-y: auto;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                </button>
            </div>
            <div class="modal-body">
                @ChildContent
            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public string? Title { get; set; } = "Tildel Mentor";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter] 
    public EventCallback<int> OnMentorSelected { get; set; }

    private string modalDisplay = "none;";
    private string modalClass = string.Empty;
    private bool showBackdrop = false;

    // Make method public so it can be called from the parent
    public async Task SelectMentor(int mentorId)
    {
        await OnMentorSelected.InvokeAsync(mentorId);
        Close();
    }

    public void Open(int goalId)
    {
        modalDisplay = "block";
        modalClass = "show";
        showBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        modalDisplay = "none";
        modalClass = string.Empty;
        showBackdrop = false;
        StateHasChanged();
    }
}