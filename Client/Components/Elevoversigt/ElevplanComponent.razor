@using Core
@using System.Linq
@using Client.Components.Administration
@inject NavigationManager navMan



@if (Plan != null || PlanTemplate != null)
{
    <Tabs EnableFadeEffect="true">
        @foreach (var semester in semestre)
        {
            <Tab Title="@($"{semester}")">
                <Content>
                    <div class="mt-3">
                        <Accordion>
                            @foreach (var forløb in (Plan?.Forløbs ?? Enumerable.Empty<Forløb>()).Where(f => f.Semester == semester))
                            {
                                <AccordionItem IsCollapsed="false">
                                    <TitleTemplate>
                                        <div class="d-flex justify-content-between align-items-center w-100">
                                            <span>@forløb.Title</span>
                                            <!--Her skal progress bar være, når vi får -->
                                        </div>
                                    </TitleTemplate>
                                    <Content>
                                        <Accordion>
                                            @foreach (var goal in forløb.Goals)
                                            {
                                                <AccordionItem>
                                                    <TitleTemplate>
                                                        <div class="d-flex justify-content-between align-items-center w-100">
                                                            <span class="d-flex justify-content-between align-items-center w-100">
                                                                @goal.Title
                                                                @if (goal.Status == "Completed")
                                                                {
                                                                    <img src="icons/check.svg" alt="Delete" style="width: 32px; height: 32px;"/>
                                                                }
                                                                @if (goal.Status == "InProgress")
                                                                {
                                                                    <img src="icons/arrow-clockwise.svg" alt="Delete" style="width: 16px; height: 16px;"/>
                                                                }
                                                                @if (goal.Status == "AwaitingApproval")
                                                                {
                                                                    <img src="icons/hourglass.svg" alt="Delete" style="width: 16px; height: 16px;"/>
                                                                }
                                                            </span>
                                                            @if (ShowSubmitButton)
                                                            {
                                                                <button
                                                                    @onclick="() => HandleDeleteGoal(goal)"
                                                                    @onclick:stopPropagation="true"
                                                                    style="border: none; background: none; padding: 0; margin-right: 10px; cursor: pointer;">
                                                                    <img src="icons/delete.png" alt="Delete" style="width: 16px; height: 16px;"/>
                                                                </button>
                                                            }
                                                        </div>
                                                    </TitleTemplate>
                                                    <Content>
                                                        <div class="d-flex justify-content-between align-items-center w-100">
                                                            <div>
                                                            <p>@goal.Description</p>
                                                            @if (goal.Status != "Active")
                                                            {
                                                                <img src="icons/info-circle.svg" @onclick="() => OpenModal(goal)" alt="Historik" style="width:16px; height: 16px"/>
                                                            }
                                                            </div>
                                                            @if (goal.Status != "Completed" && goal.Type == "Delmål")
                                                            {
                                                                @if (StartGoal && goal.Status == "Active")
                                                                {
                                                                    <button class="btn btn-sm btn-primary" @onclick="() => StartGoalNow(goal)">Påbegynd</button>
                                                                }
                                                                else if (StartGoal && goal.Status == "InProgress" && goal.Type == "Delmål")
                                                                {
                                                                    <div class="mentor-display d-flex align-items-center">
                                                                        <button class="btn btn-success" @onclick="() => ProcessGoal(goal)">Godkend delmål</button>
                                                                    </div>
                                                                }
                                                                else if (StartGoal && goal.Status == "AwaitingApproval" && _currentUser.Rolle == "Køkkenchef" && goal.Type == "Delmål")
                                                                {
                                                                    <div class="mentor-display d-flex align-items-center">
                                                                        <button class="btn btn-success" @onclick="() => ProcessGoal(goal)">Godkend delmål</button>
                                                                    </div>
                                                                }
                                                            }
                                                        </div>
                                                        @if (ShowComments)
                                                        {
                                                            if (goal.Comments?.Any() == true)
                                                            {
                                                                <div class="comment-section mt-3 p-3 bg-light rounded">
                                                                    <h6>Kommentar:</h6>
                                                                    @foreach (var comment in goal.Comments)
                                                                    {
                                                                        <div class="comment mb-2 p-2 bg-white rounded">
                                                                            <div class="d-flex justify-content-between">
                                                                                <strong>@comment.CreatorName</strong>
                                                                                <small class="text-muted">@comment.CreatedAt.ToString("dd-MM-yyyy HH:mm")</small>
                                                                            </div>
                                                                            <p class="mb-0">@comment.Text</p>
                                                                        </div>
                                                                    }

                                                                    <div class="mt-3">
                                                                        @if (!comments.ContainsKey(goal.Id))
                                                                        {
                                                                            comments[goal.Id] = string.Empty;
                                                                        }

                                                                        <textarea @bind="comments[goal.Id]" class="form-control mb-2" placeholder="Skriv..."></textarea>
                                                                        <button @onclick="@(() => HandleAddCommentClicked(goal, comments[goal.Id], _currentUser))" class="btn btn-sm btn-primary">Tilføj kommentar</button>
                                                                    </div>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <div class="comment-section mt-3 p-3 bg-light rounded">
                                                                    <div class="mt-3">
                                                                        @if (!comments.ContainsKey(goal.Id))
                                                                        {
                                                                            comments[goal.Id] = string.Empty;
                                                                        }

                                                                        <textarea @bind="comments[goal.Id]" class="form-control mb-2" placeholder="Skriv..."></textarea>
                                                                        <button @onclick="@(() => HandleAddCommentClicked(goal, comments[goal.Id], _currentUser))" class="btn btn-sm btn-primary">Tilføj kommentar</button>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    </Content>
                                                </AccordionItem>
                                            }
                                        </Accordion>
                                    </Content>
                                </AccordionItem>
                            }   
                        </Accordion>
                    </div>
                </Content>
            </Tab>
        }
    </Tabs>

    @if (ShowSubmitButton)
    {
        <button class="btn btn-success mt-3" @onclick="HandleSubmitButtonClicked">Opret Elevplan</button>
    }
    
    
    <ModalShowHistory @ref=_goalHistoryModal Title="Historie">
        <div class="hotel-list">
            @if (_currentGoal != null)
            {
                @if (_currentGoal.StartedAt != null && _currentGoal.StarterName != null)
                {
                    <p>Tidspunkt for start: @_currentGoal.StartedAt</p>
                    <p>Starter: @_currentGoal.StarterName</p>
                    <br/>
                    @if (_currentGoal.ConfirmedAt != null && _currentGoal.ConfirmerName != null)
                    {
                        <p>Tidspunkt for afsluttet: @_currentGoal.ConfirmedAt </p>
                        <p>Bekræfter: @_currentGoal.ConfirmerName</p>
                        <br/>
                    }
                    @if (_currentGoal.CompletedAt != null)
                    {
                        <p>Godkendt af leder den: @_currentGoal.CompletedAt</p>
                    }
                }
            }
            else
            {
                <p>Ingen information tilgængelig</p>
            }
        </div>
    </ModalShowHistory>

    
    
}

@code 
{
    //Parameters
    
        
    [Parameter] public Plan Plan { get; set; }
    
    [Parameter] public PlanTemplate PlanTemplate { get; set; }
    
    [Parameter] public bool ShowSubmitButton { get; set; } = false; //Viser ikke Opret Elevplan knap og Delete Goal ved visning
    
    [Parameter] public bool ShowComments { get; set; } = false; //Viser ikke kommentar spor ved oprettelse

    [Parameter] public bool StartGoal { get; set; } = false; //Viser hvem der kan starte et mål for en elev

    [CascadingParameter] 
    private BrugerLoginDTO _currentUser { get; set; }
    
    private ModalShowHistory _goalHistoryModal { get; set; }
    

    public string[] semestre = { "År 1", "År 2", "År 3" };

    private Goal _currentGoal;
    
    // // Hjælpe klasse skal laves om
    public class MentorAssignment
    {
        public int PlanId { get; set; }
        public int ForløbId { get; set; }
        public int GoalId { get; set; }
        public int MentorId { get; set; }
        public string MentorName { get; set; }
    }
    
    //Kommentar
    private Dictionary<int, string> comments = new();
    
    [Parameter]
    public EventCallback<NewComment> OnAddCommentClick { get; set; }

    private async Task HandleAddCommentClicked(Goal goal, string comment, BrugerLoginDTO bruger)
    {
        if (!string.IsNullOrWhiteSpace(comment))
        {
            var newComment = new NewComment
            {
                
                PlanId = goal.PlanId,
                ForløbId = goal.ForløbId,
                GoalId = goal.Id,
                Comment = comment,
                CommentorId = bruger.Id,
                CommentName = bruger.FirstName
            };
            Console.WriteLine($"Commenting on Goal: PlanId={goal.PlanId}, ForløbId={goal.ForløbId}, GoalId={goal.Id}");

            await OnAddCommentClick.InvokeAsync(newComment);
            StateHasChanged();
            comments[goal.Id] = string.Empty;
        }
    }
    
    //Opret plan
    [Parameter] 
    public EventCallback OnSubmitClicked { get; set; } 
    
    private async Task HandleSubmitButtonClicked()
    {
        await OnSubmitClicked.InvokeAsync(); //Notifier parent componennt (opretelevplan/studentId...)
    }
    
    //Slet goal
    [Parameter]
    public EventCallback<Goal> OnDelteClicked { get; set; }
    
    private async Task HandleDeleteGoal(Goal goal)
    {
        await OnDelteClicked.InvokeAsync(goal);
    }
    

    //Active -> InProgress
    [Parameter]
    public EventCallback<MentorAssignment> OnStartGoal { get; set; }
    private async Task StartGoalNow(Goal goal)
    {

        var newStarter = new MentorAssignment
        {
            PlanId = goal.PlanId,
            ForløbId = goal.ForløbId,
            GoalId = goal.Id,
            MentorId = _currentUser.Id,
            MentorName = _currentUser.FirstName
        };
        
        await OnStartGoal.InvokeAsync(newStarter);
    }
    
        
    //Process Goal, status går fra InProgress -> Awaiting Approval
    [Parameter]
    public EventCallback<MentorAssignment> OnProcessGoal { get; set; }

    private async Task ProcessGoal(Goal goal)
    {
        var newConfirmer = new MentorAssignment
        {
            PlanId = goal.PlanId,
            ForløbId = goal.ForløbId,
            GoalId = goal.Id,
            MentorId = _currentUser.Id,
            MentorName = _currentUser.FirstName
        };
        
        await OnProcessGoal.InvokeAsync(newConfirmer);
    }
    
    private void OpenModal(Goal goal)
    {
        _currentGoal = goal;
        _goalHistoryModal.Open();
        
    }
}
