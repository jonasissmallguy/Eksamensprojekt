@using Core
@using System.Linq
@using Components.Mentoroversigt
@using Client.Components.Mentoroversigt
@inject NavigationManager navMan



@if (Plan != null)
{
    <Tabs EnableFadeEffect="true">
        @foreach (var forløb in Plan.Forløbs)
        {
            <Tab Title="@($"År {forløb.Semester}")">
                <Content>
                    <div class="mt-3">
                        <Accordion>
                            <AccordionItem IsCollapsed="false">
                                <TitleTemplate>
                                    <span>@($"{forløb.Title} - {forløb.StartDate:dd-MM-yyyy}")
                                        </span>
                                </TitleTemplate>
                                <Content>
                                    <Accordion>
                                        @foreach (var id in forløb.GoalIds)
                                        {
                                            @if (Goals != null && Goals.TryGetValue(id, out var goal))
                                            {
                                                <AccordionItem>
                                                    <TitleTemplate>
                                                        <div class="d-flex justify-content-between align-items-center w-100">
                                                            <span class="d-flex justify-content-between align-items-center w-100">
                                                                @goal.Title
                                                                @if (HasGoalFinished(goal.Id))
                                                                {
                                                                    <img src="icons/check.svg" alt="Delete" style="width: 32px; height: 32px;"/>
                                                                }
                                                            </span>
                                                            
                                                            @if (ShowSubmitButton)
                                                            {
                                                                <button
                                                                    @onclick="() => HandleDeleteGoal(goal)"
                                                                    @onclick:stopPropagation="true"
                                                                    style="border: none; background: none; padding: 0; margin-right: 10px; cursor: pointer;">
                                                                    <img src="icons/delete.png" alt="Delete" style="width: 16px; height: 16px;"/>
                                                                </button>
                                                            }
                                                        </div>
                                                    </TitleTemplate>
                                                    <Content>
                                                        <div class="d-flex justify-content-between align-items-center w-100">
                                                            <p>@goal.Description</p>
                                                            @if (!HasGoalFinished(goal.Id))
                                                            {
                                                                @if (AddMentor && !HasMentorAssigned(goal.Id))
                                                                {
                                                                    <button class="btn btn-sm btn-primary" @onclick="() => AddMentorToGoal(goal.Id)">Tildel mentor</button>
                                                                }
                                                                else if (HasMentorAssigned(goal.Id))
                                                                {
                                                                    <div class="mentor-display d-flex align-items-center">
                                                                        <button class="btn btn-success" @onclick="() => ConfirmGoalFinished(goal.Id)">Godkend delmål</button>
                                                                        <button class="btn btn-danger" @onclick="() => RemoveMentorFromGoal(goal.Id)">Fjern mentor</button>
                                                                        <small><strong>MentorId:</strong> @goal.MentorId</small>
                                                                    </div>
                                                                }   
                                                            }
                                                        </div>
                                                        @if (ShowComments)
                                                        {
                                                            if (goal.Comments?.Any() == true)
                                                            {
                                                                <div class="comment-section mt-3 p-3 bg-light rounded">
                                                                    <h6>Kommentar:</h6>
                                                                    @foreach (var comment in goal.Comments)
                                                                    {
                                                                        <div class="comment mb-2 p-2 bg-white rounded">
                                                                            <div class="d-flex justify-content-between">
                                                                                <strong>@comment.CreatorName</strong>
                                                                                <small class="text-muted">@DateTime.Now.ToString("dd-MM-yyyy HH:mm")</small>
                                                                            </div>
                                                                            <p class="mb-0">@comment.Text</p>
                                                                        </div>
                                                                    }

                                                                    <div class="mt-3">
                                                                        @if (!comments.ContainsKey(goal.Id))
                                                                        {
                                                                            comments[goal.Id] = string.Empty;
                                                                        }

                                                                        <textarea @bind="comments[goal.Id]" class="form-control mb-2" placeholder="Skriv..."></textarea>
                                                                        <button @onclick="@(() => HandleAddCommentClicked(goal, comments[goal.Id]))" class="btn btn-sm btn-primary">Tilføj kommentar</button>
                                                                    </div>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <div class="comment-section mt-3 p-3 bg-light rounded">
                                                                    <div class="mt-3">
                                                                        @if (!comments.ContainsKey(goal.Id))
                                                                        {
                                                                            comments[goal.Id] = string.Empty;
                                                                        }

                                                                        <textarea @bind="comments[goal.Id]" class="form-control mb-2" placeholder="Skriv..."></textarea>
                                                                        <button @onclick="@(() => HandleAddCommentClicked(goal, comments[goal.Id]))" class="btn btn-sm btn-primary">Tilføj kommentar</button>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    </Content>
                                                </AccordionItem>
                                            }
                                        }
                                    </Accordion>
                                </Content>
                            </AccordionItem>
                        </Accordion>
                    </div>
                </Content>
            </Tab>
        }
    </Tabs>

    @if (ShowSubmitButton)
    {
        <button class="btn btn-success mt-3" @onclick="HandleSubmitButtonClicked">Opret Elevplan</button>
    }

    <ModalOversigt @ref="mentorModal" Title="Tildel Mentor" OnMentorSelected="HandleMentorSelected">
        @if (mentors != null)
        {
            <div class="mentor-list">
                @foreach (var mentor in mentors)
                {
                    <div class="mentor-item p-2 my-2 border rounded" @onclick="() => mentorModal.SelectMentor(mentor.Id)">
                        <div class="d-flex align-items-center">
                            <div class="mentor-avatar me-3">
                                @if (!string.IsNullOrEmpty(mentor.AvatarUrl))
                                {
                                    <img src="@mentor.AvatarUrl" alt="@mentor.Name" class="rounded-circle" style="width: 50px; height: 50px;" />
                                }
                                else
                                {
                                    <div class="rounded-circle bg-secondary text-white d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                                        @mentor.Name.Substring(0, 1)
                                    </div>
                                }
                            </div>
                            <div>
                                <h6 class="mb-0">@mentor.Name</h6>
                                <small class="text-muted">@mentor.Role</small>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Indlæser mentorer...</p>
        }
    </ModalOversigt>
    
    
    
}

@code 
{
    //ParameterS
    [Parameter] public Plan Plan { get; set; }

    [Parameter] public Dictionary<int, Goal> Goals { get; set; } = new();
    
    [Parameter] public bool ShowSubmitButton { get; set; } = false; //Viser ikke Opret Elevplan knap og Delete Goal ved visning
    
    [Parameter] public bool ShowComments { get; set; } = false; //Viser ikke kommentar spor ved oprettelse

    [Parameter] public bool AddMentor { get; set; } = false; //Viser tildelmentor til køkkenchef
    
    
    [Parameter]
    public EventCallback<MentorAssignment> OnMentorAssigned { get; set; } 
    
    
    //ModalOversigt
    private ModalOversigt mentorModal { get; set; }
    
    private int currentGoalId;
    

    private async Task HandleMentorSelected(int mentorId)
    {
        var assignment = new MentorAssignment
        {
            GoalId = currentGoalId,
            MentorId = mentorId
        };
        
        await OnMentorAssigned.InvokeAsync(assignment);
    }

    private bool HasMentorAssigned(int goalId)
    {
        if (Goals.TryGetValue(goalId, out var goal))
        {
            if (goal.MentorId.HasValue)
            {
                return true;
            }
        }
        return false;
    }

    private bool HasGoalFinished(int goalId)
    {
        if (Goals.TryGetValue(goalId, out var goal))
        {
            if (goal.Status == "Completed")
            {
                return true;
            }
        }

        return false;
    }
    
    private void AddMentorToGoal(int goalId)
    {
        currentGoalId = goalId;
        mentorModal.Open(goalId);
    }
    
    [Parameter] public EventCallback<int> OnMentorRemove { get; set; } 
    private async Task RemoveMentorFromGoal(int goalId)
    {
        await OnMentorRemove.InvokeAsync(goalId);
    }
    
   
    //Nendestående skal flyttes ud af componenten
    
    private List<MentorViewModel> mentors = new List<MentorViewModel>
    {
        new MentorViewModel { Id = 1, Name = "Anders Jensen", Role = "Kok", AvatarUrl = "" },
        new MentorViewModel { Id = 2, Name = "Marie Nielsen", Role = "Kok", AvatarUrl = "" },
        new MentorViewModel { Id = 3, Name = "Peter Hansen", Role = "Kok", AvatarUrl = "" }
    };
    
    // Hjælpe klasse skal laves om
    public class MentorViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Role { get; set; }
        public string AvatarUrl { get; set; }
    }
    
    // // Hjælpe klasse skal laves om
    public class MentorAssignment
    {
        public int GoalId { get; set; }
        public int MentorId { get; set; }
        public string MentorName { get; set; }
    }
    
    
    
    //Kommentar
    private Dictionary<int, string> comments = new();
    
    [Parameter]
    public EventCallback<NewComment> OnAddCommentClick { get; set; }

    private async Task HandleAddCommentClicked(Goal goal, string comment)
    {
        if (!string.IsNullOrWhiteSpace(comment))
        {
            var newComment = new NewComment
            {
                GoalId = goal.Id,
                Comment = comment
            };
            
            await OnAddCommentClick.InvokeAsync(newComment);
            comments[goal.Id] = string.Empty;
        }
    }
    
    //Opret plan
    [Parameter] 
    public EventCallback OnSubmitClicked { get; set; } 
    
    private async Task HandleSubmitButtonClicked()
    {
        await OnSubmitClicked.InvokeAsync(); //Notifier parent componennt (opretelevplan/studentId...)
    }
    
    //Slet goal
    [Parameter]
    public EventCallback<Goal> OnDelteClicked { get; set; }
    
    private async Task HandleDeleteGoal(Goal goal)
    {
        await OnDelteClicked.InvokeAsync(goal);
    }
    
    
    //Confirm goal
    [Parameter]
    public EventCallback<int> OnConfirmedGoal { get; set; }

    private async Task ConfirmGoalFinished(int goalId)
    {
        await OnConfirmedGoal.InvokeAsync(goalId);
    }

 
}
