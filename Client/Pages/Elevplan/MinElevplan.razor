@using Core
@using Client.Components.Elevoversigt


@inject IBruger IBrugerService;
@inject NavigationManager navMan;
@inject IGoal IGoalService;

@page "/minelevplan/{studentId:int}"

<div class="page-wrapper">
    
    @if (elev != null)
    {
        <div class="bio">
            <div class="piccontainer">
                <img class="biopic" src="https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png"/>
            </div>
            <div class="textcontainer">
                <h3 class="navn">@elev.FirstName @elev.LastName</h3>
                <p class="telefon">Telefon: @elev.Mobile </p>
                <p class="mail">Mail: @elev.Email</p>
                <p class="restaurant">Restaurant: @elev.HotelNavn</p>
                <div class="goal-progress-horizontal">
                    @if (goalList == null)
                    {
                        <p>Loading progress...</p>
                    }
                    else
                    {
                        @foreach (var progress in goalList)
                        {
                            <div class="progress-item">
                                <strong>@progress.YearNumber:</strong> @progress.CompletedGoals / @progress.TotalGoals
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    }

    <div class="content-scroll">
        @if (elev != null && _currentUser.Rolle == "HR")
        {
            <ElevplanComponent Plan="@elevPlan" ShowSubmitButton="false" ShowComments="true" OnAddCommentClick="AddComment" StartGoal="false" OnStartGoal="HandlingGoalStart" OnProcessGoal="ConfirmGoal"/>
        }
        else if (elev != null && _currentUser.Rolle == "Køkkenchef")
        {
            <ElevplanComponent Plan="@elevPlan"  ShowSubmitButton="false" ShowComments="true" OnAddCommentClick="AddComment" StartGoal="true" OnStartGoal="HandlingGoalStart" OnProcessGoal="ConfirmGoal" OnConfirmSchool="ConfirmSchool"/>
        }
        else if (elev != null && _currentUser.Rolle == "Kok")
        {
            <ElevplanComponent Plan="@elevPlan"  ShowSubmitButton="false" ShowComments="true" OnAddCommentClick="AddComment" StartGoal="true" OnStartGoal="HandlingGoalStart" OnProcessGoal="ConfirmGoal"/>
        }
        else if (elev != null && _currentUser.Rolle == "Elev")
        {
            <ElevplanComponent Plan="@elevPlan"  ShowSubmitButton="false" ShowComments="true" OnAddCommentClick="AddComment" StartGoal="true" OnStartGoal="HandlingGoalStart"/>
        }
        else
        {
            <p>..Loading</p>
        }
    </div>
</div>
@code {

    [CascadingParameter] private BrugerLoginDTO _currentUser { get; set; }

    [Parameter] public int studentId { get; set; }
    private User elev;
    private Plan? elevPlan;
    private List<GoalProgessDTO> goalList;


    protected override async Task OnInitializedAsync()
    {
        if (_currentUser == null)
        {
            navMan.NavigateTo($"login/minelevplan/{studentId}");
            return;
        }
        
        elev = await IBrugerService.GetBrugerById(studentId);
        elevPlan = elev.ElevPlan;
        goalList = await IGoalService.GoalProgess(studentId);

    }

    private async Task AddComment(NewComment comment)
    {
        var addedComment = await IGoalService.AddComment(comment);
        if (addedComment != null)
        {
            var forløb = elevPlan.Forløbs.FirstOrDefault(f => f.Id == addedComment.ForløbId);
            if (forløb != null)
            {
                var goal = forløb.Goals.FirstOrDefault(g => g.Id == addedComment.GoalId);
                if (goal != null)
                {
                    if (goal.Comments == null)
                        goal.Comments = new List<Comment>();

                    goal.Comments.Add(addedComment);
                    StateHasChanged();
                }
            }
        }
    }
    
    //Skal alt det her under laves om? 
    private async Task HandlingGoalStart(MentorAssignment assignment)
    {
        var updatedGoal = await IGoalService.StartGoal(assignment);

        if (updatedGoal != null)
        {
            var localGoal = elevPlan.Forløbs
                .FirstOrDefault(f => f.Id == updatedGoal.ForløbId)?
                .Goals.FirstOrDefault(g => g.Id == updatedGoal.Id);

            if (localGoal != null)
            {
                localGoal.Status = updatedGoal.Status;
                localGoal.StarterId = updatedGoal.StarterId;
                localGoal.StarterName = updatedGoal.StarterName;
                localGoal.StartedAt = updatedGoal.StartedAt;
                StateHasChanged();
            }
        }
    }


    private async Task ConfirmGoal(MentorAssignment bruger)
    {
        if (_currentUser.Rolle == "Kok") //hvorfor det her?
        {
            var processedGoal = await IGoalService.ProcessGoal(bruger); 

            if (processedGoal != null)
            {
                var localGoal = elevPlan.Forløbs
                    .FirstOrDefault(f => f.Id == processedGoal.ForløbId)?
                    .Goals.FirstOrDefault(g => g.Id == processedGoal.Id);

                if (localGoal != null)
                {
                    localGoal.Status = processedGoal.Status;
                    localGoal.StarterId = processedGoal.StarterId;
                    localGoal.StarterName = processedGoal.StarterName;
                    localGoal.StartedAt = processedGoal.StartedAt;
                    StateHasChanged();
                }
            }
        }
        else if (_currentUser.Rolle == "Køkkenchef")
        {
            var confirmedGoal = await IGoalService.ConfirmGoal(bruger.PlanId, bruger.ForløbId, bruger.GoalId);

            if (confirmedGoal != null)
            {
                var localGoal = elevPlan.Forløbs
                    .FirstOrDefault(f => f.Id == confirmedGoal.ForløbId)?
                    .Goals.FirstOrDefault(g => g.Id == confirmedGoal.Id);

                if (localGoal != null)
                {
                    localGoal.Status = confirmedGoal.Status;
                    localGoal.CompletedAt = confirmedGoal.CompletedAt;
                    goalList = await IGoalService.GoalProgess(studentId);
                    StateHasChanged();
                }
            }   
        }
    }

    private async Task ConfirmSchool(MentorAssignment schoolConfirmation)
    {
        var confirmedGoal = await IGoalService.ConfirmSchool(schoolConfirmation.PlanId, schoolConfirmation.ForløbId, schoolConfirmation.GoalId);

        if (confirmedGoal != null)
        {
            var localGoal = elevPlan.Forløbs
                .FirstOrDefault(f => f.Id == schoolConfirmation.ForløbId)?
                .Goals.FirstOrDefault(g => g.Id == schoolConfirmation.GoalId);
        
            if (localGoal != null)
            {
                localGoal.CompletedAt =  confirmedGoal.CompletedAt;
                localGoal.Status = confirmedGoal.Status;
                goalList = await IGoalService.GoalProgess(studentId);
                StateHasChanged();
            }
        }


        

    }

}

