@using Core
@using Client.Components.Elevoversigt
@using DotNetEnv.Extensions
@using MongoDB.Bson

@inject IBruger IBrugerService;
@inject IElevPlan IElevPlanService;
@inject IGoal IGoalService;

@page "/minelevplan/{studentId:int}"

<div class="bio">
    <div class="piccontainer">
        <img class="biopic" src="https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png"/>   
    </div>
    <div class="textcontainer">
        <h3 class="navn">@elev.Navn </h3>
        <p class="telefon">Telefon: @elev.Telefon </p>
        <p class="mail">Mail: @elev.Email</p>
        <p class="restaurant">Restaurant: @elev.RestaurantNavn</p>
    </div>
</div>


@if (elev != null && _currentUser.Rolle == "HR")
{
    <ElevplanComponent Plan="@elevPlan" Goals="@goals" ShowSubmitButton="false" ShowComments="true" OnAddCommentClick="AddComment" AddMentor="false" OnMentorAssigned="AddMentor" 
                       OnMentorRemove="RemoveMentor" OnConfirmedGoal="ConfirmGoal"/>
}
else if (elev != null && _currentUser.Rolle == "Køkkenchef")
{
    <ElevplanComponent Plan="@elevPlan" Goals="@goals" ShowSubmitButton="false" ShowComments="true" OnAddCommentClick="AddComment" AddMentor="true" OnMentorAssigned="AddMentor" 
                       OnMentorRemove="RemoveMentor" OnConfirmedGoal="ConfirmGoal"/>
}
else if (elev != null && _currentUser.Rolle == "Elev")
{
    <ElevplanComponent Plan="@elevPlan" Goals="@goals" ShowSubmitButton="false" ShowComments="true" OnAddCommentClick="AddComment" AddMentor="false" OnMentorAssigned="AddMentor" 
                       OnMentorRemove="RemoveMentor" OnConfirmedGoal="ConfirmGoal"/>
}

else
{
    <p>..Loading</p>
}

@code {

    [CascadingParameter] private BrugerLoginDTO _currentUser { get; set; }

    [Parameter] public int studentId { get; set; }
    private BrugerProfilDTO elev;
    private Plan? elevPlan;

    private Dictionary<int, Goal> goals = new();

    protected override async Task OnInitializedAsync()
    {
        elev = await IBrugerService.GetBrugerById(studentId);
        elevPlan = await IElevPlanService.GetPlanByStudentId(studentId);
        
        //Dette er bare brugt til visning til COmwell - dette skal slettes!!!!!!
        if (elevPlan == null)
        {
            elevPlan = await IElevPlanService.CreateElevPlan(studentId);
        }
        //SLET DET OVENO
        
        if (elevPlan != null)
        {
            goals = await IGoalService.GetAllGoalsByPlanId(studentId);
        }
    }

    private async Task AddComment(NewComment comment)
    {
        await IGoalService.AddComment(comment, _currentUser);

    }

    private async Task AddMentor(ElevplanComponent.MentorAssignment newMentor)
    {
        await IGoalService.AddMentorToGoal(newMentor);
    }

    private async Task RemoveMentor(int goalId)
    {
        await IGoalService.RemoveMentorFromGoal(goalId);
        
    }

    private async Task ConfirmGoal(int goalId)
    {
        await IGoalService.ConfirmGoal(goalId);
        StateHasChanged();
        
    }

}