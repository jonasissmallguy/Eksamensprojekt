@using Client.Components.Delmål
@using Core
@using Client.Components.Elevoversigt


@inject NavigationManager navMan;
@inject IElevPlan IElevPlanService;
@inject IBruger IBrugerService;


@page "/opretelevplan/{studentId:int}"

@if (_loading)
{
    <p>Opretter elevplan.... vent venligst </p>
}
else
{
    @if (nyElevPlan != null && elev != null)
    {
        <h4>Elevplan for @elev.FirstName @elev.LastName</h4>
        
        <span style="color: red">@errorText</span>

        <ElevplanComponent Plan="@nyElevPlan"ShowSubmitButton="true"ShowComments="false" 
                           OnDelteClicked="HandleDeleteGoal" OnSubmitClicked="HandleElevplanSubmit" />

        <button @onclick="OpenModal" class="btn btn-primary">Opret delmål</button>
        
        @if (_addingPlan)
        {
            <p>Tilføjer plan... vent venligst</p>
            
        }
        <TilføjDelmålComponent @ref="addGoalModalRef"
                               StudentId="studentId"
                               ElevPlan="@nyElevPlan"
                               OnGoalAdded="OnGoalAdded"
                               ShowSchoolSection="false"
                               WorkInMemory="true"/>
    }
    else
    {
        <span style="color: red">@errorText</span>
    }
}

@code {

    //Brugeren der er logget ind
    [CascadingParameter] private BrugerLoginDTO _currentUser { get; set; }
  
    //Henter dataen før HTML vises
    private bool _loading = true;
    
    //Elevens id
    [Parameter] public int studentId { get; set; }

    private Plan nyElevPlan;

    private User elev;
    
    private TilføjDelmålComponent addGoalModalRef;
    
    //Viser besked, når vi sætter til true
    private bool _addingPlan = false;

    //Errortext
    string errorText = "";

    
    protected override async Task OnInitializedAsync()
    {
        
        if (_currentUser == null)
        {
            navMan.NavigateTo("login/");
            return;
        }

        if (_currentUser.Rolle != "HR")
        {
            navMan.NavigateTo("dashboard");
        }

        try
        {
            elev = await IBrugerService.GetBrugerById(studentId);
            nyElevPlan = await IElevPlanService.GetElevPlanTemplate(studentId);
        }

        catch (Exception e)
        {
            errorText = e.Message;
        }
        
        _loading = false;
    }
    
    private async Task HandleDeleteGoal(Goal goal)
    {
        var forløb = nyElevPlan.Forløbs.FirstOrDefault(f => f.Id == goal.ForløbId);

        if (forløb != null)
        {
            var goalToRemove = forløb.Goals.FirstOrDefault(x => x.Id == goal.Id);
            if (goalToRemove != null)
            {
                forløb.Goals.Remove(goalToRemove);
            }
        }

    }
    
    private async Task OnGoalAdded(Goal newGoal)
    {
        var forløb = nyElevPlan.Forløbs.FirstOrDefault(f => f.Id == newGoal.ForløbId);
        if (forløb != null)
        {
            forløb.Goals.Add(newGoal);
        }
        
        StateHasChanged();
    }
    
    private async Task HandleElevplanSubmit()
    {
        _addingPlan = true;
        
        var result = await IElevPlanService.SaveElevPlan(nyElevPlan, studentId);

        if (!result)
        {
            errorText = "Kunne ikke gemme elevplan, prøv venligst igen";
            _addingPlan = false;
            return;
        }
        navMan.NavigateTo("/dashboard");
        
    }
    
    private async Task OpenModal()
    { 
        addGoalModalRef?.Open();
    }


}