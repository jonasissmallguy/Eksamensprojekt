@using Client.Components.Delmål
@using Core
@using Client.Components.Elevoversigt


@inject NavigationManager navMan;
@inject IElevPlan IElevPlanService;
@inject IBruger IBrugerService;
@inject IGoal IGoalService;


@page "/opretelevplan/{studentId:int}"

@if (_loading)
{
    <p>Opretter elevplan.... vent venligst </p>
}
else
{
    @if (nyElevPlan != null)
    {
        <h4>Elevplan for @elev.FirstName @elev.LastName</h4>
        
        <ElevplanComponent Plan="@nyElevPlan"ShowSubmitButton="true"ShowComments="false" 
                           OnDelteClicked="HandleDeleteGoal" OnSubmitClicked="HandleElevplanSubmit" />

        <button @onclick="OpenModal" class="btn btn-primary">Opret delmål</button>
        
        <TilføjDelmålComponent @ref="addGoalModalRef"
                               StudentId="studentId"
                               ElevPlan="@nyElevPlan"
                               OnGoalAdded="@OnGoalAdded"/>
    }
}

@code {

    [CascadingParameter] private BrugerLoginDTO _currentUser { get; set; }
    private bool _loading = true;
    [Parameter] public int studentId { get; set; }
    private Plan? nyElevPlan = new();
    private User elev = new();
    private TilføjDelmålComponent addGoalModalRef;


    protected override async Task OnInitializedAsync()
    {
        
        if (_currentUser == null)
        {
            navMan.NavigateTo("login/");
            return;
        }

        if (_currentUser.Rolle != "HR")
        {
            navMan.NavigateTo("dashboard");
        }
        
        elev = await IBrugerService.GetBrugerById(studentId);

        if (elev.ElevPlan != null)
        {
            nyElevPlan = elev.ElevPlan;
        }
        else
        {
            nyElevPlan = await IElevPlanService.CreateElevPlan(studentId);
        }

        _loading = false;
    }
    
    private async Task HandleDeleteGoal(Goal goal)
    {
        await IGoalService.DeleteGoal(goal, studentId);

        var forløb = nyElevPlan.Forløbs.FirstOrDefault(f => f.Id == goal.ForløbId);

        if (forløb != null)
        {
            forløb.Goals.RemoveAll(x => x.Id == goal.Id);
        }

    }
    
    private async Task HandleElevplanSubmit()
    {
        navMan.NavigateTo("/dashboard");
    }


    private async Task OpenModal()
    {

        addGoalModalRef?.Open();
    }

    private async Task OnGoalAdded()
    {
        StateHasChanged();
    }

}