@using Client.Components
@using Core;
@using Core.DTO.Kursus

@inject IKursus IKursusService;
@inject NavigationManager navMan;

@page "/kursusoversigt"
<h3>Kursusoversigt</h3>

@if (!string.IsNullOrEmpty(errorText))
{
    <span style="color: red">@errorText</span>
}

@if (alleKurser != null)
{
    <button @onclick="AddCourse">Tilføj kursus</button>

    <table>
        <tr>
            <th>Titel</th>
            <th>Lokation</th>
            <th>Antal deltager</th>
            <th>Max deltager</th>
            <th>Start dato</th>
            <th>Slut dato</th>
            <th>Status</th>
        </tr>

        @foreach (var kursus in alleKurser)
        {
            <tr>
                <td @onclick="@(() => NavigateToCourse(kursus.Id))">@kursus.Title</td>
                <td @onclick="@(() => NavigateToCourse(kursus.Id))">@kursus.Location</td>
                <td @onclick="@(() => NavigateToCourse(kursus.Id))">@kursus.Participants</td>
                <td @onclick="@(() => NavigateToCourse(kursus.Id))">@kursus.MaxParticipants</td>
                <td @onclick="@(() => NavigateToCourse(kursus.Id))">@kursus.StartDate</td>
                <td @onclick="@(() => NavigateToCourse(kursus.Id))">@kursus.EndDate</td>
                <td>@kursus.Status</td>
            </tr>
        }
    </table>
}

<ModalDialog @ref="_modalKursus">
    <EditForm Model="newCourse" OnValidSubmit="SaveCourse">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="form-group mb-3">
            <label for="courseSelect">Vælg kursus:</label>
            <InputSelect class="form-select" @bind-Value="newCourse.TemplateId">
                <option value="">-- Vælg kursus --</option>
                @if (CoursesTemplates != null)
                {
                    @foreach (var course in CoursesTemplates)
                    {
                        <option value="@course.Id">@course.Title</option>
                    }
                }
            </InputSelect>
        </div>

        <div class="form-group mb-3">
            <label for="location">Max Deltager:</label>
            <InputNumber class="form-control" @bind-Value="newCourse.MaxParticipants" />
        </div>

        <div class="form-group mb-3">
            <label for="location">Lokation:</label>
            <InputText class="form-control" @bind-Value="newCourse.Location" />
        </div>

        <div class="form-group mb-3">
            <label for="description">Beskrivelse:</label>
            <InputTextArea class="form-control" @bind-Value="newCourse.Description" />
        </div>

        <div class="form-group mb-3">
            <label for="startDate">Start dato:</label>
            <InputDate class="form-select" @bind-Value="newCourse.StartDate" />
        </div>
        

        <div class="form-group mb-3">
            <label for="endDate">Slut dato:</label>
            <InputDate class="form-select" @bind-Value="newCourse.EndDate" />
        </div>

        <div class="text-end mt-4">
            <button type="button" class="btn btn-secondary me-2" @onclick="CloseCourseSelection">Annuller</button>
            <button type="submit" class="submit-btn">Gem kursus</button>
        </div>
    </EditForm>
</ModalDialog>

@code {
    
    [CascadingParameter] 
    private BrugerLoginDTO _currentUser { get; set; }

    
    private List<Kursus> alleKurser;
    private ModalDialog _modalKursus { get; set; }
    private KursusCreationDTO newCourse = new();
    private List<Kursus> Courses;
    private List<KursusTemplate> CoursesTemplates;
    
    string errorText = "";
    
    protected override async Task OnInitializedAsync()
    {
        if (_currentUser == null)
        {
            navMan.NavigateTo("login/kursusoversigt");
            return;
        }

        if (_currentUser.Rolle != "HR")
        {
            navMan.NavigateTo("dashboard");
        }
        
        alleKurser = await IKursusService.GetAllCourses();

        if (alleKurser == null)
        {
            errorText = "Kunne ikke finde nogen kurser, venligst opret nogen for at kunne vise siden";
        }
        
    }

    private async Task AddCourse()
    {
        _modalKursus.Open();
        CoursesTemplates = await IKursusService.GetAllTemplates();

        if (CoursesTemplates == null)
        {
            errorText = "Ikke ikke finde nogen tempaltes, venligst be IT om at oprette nogen, eller få færdigudviklet din side...";
        }
    }

    private void CloseCourseSelection()
    {
        _modalKursus.Close();
    }

    private async Task SaveCourse()
    {
        var selected = CoursesTemplates.FirstOrDefault(c => c.Id == newCourse.TemplateId);
        if (selected != null)
        {
            newCourse.Title = selected.Title;
            newCourse.CourseCode = selected.CourseCode;
        }

        var kursus = await IKursusService.SaveCourse(newCourse);

        if (kursus == null)
        {
            errorText = "Kunne ikke gemme kursus, prøv venligst igen";
        }
        
        alleKurser.Add(kursus);
        _modalKursus.Close();
    }

    private void NavigateToCourse(int kursusId)
    {
        navMan.NavigateTo($"kursuspage/{kursusId}");
    }
}