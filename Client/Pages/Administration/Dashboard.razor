@using Core

@inject NavigationManager navMan;
@inject IBruger IBrugerService;
@inject IHotel IHotelService;


@page "/dashboard"
<h3>Dashboard</h3>

<div class="dashboard-topline">
    
    <!-- Div med en søgebar, dropdown menuer og knap til eksport af lister -->
    <div class="searchbar">
        <TextInput @bind-value="@searchText" Placeholder="Søg ved navn..."></TextInput>
    </div>

    <!-- Dropdown til hotelvalg -->
    <div class="dropdownmenu">
        <Dropdown Color="DropdownColor.Secondary">
            <DropdownToggleButton>@(selectedHotelId == null ? "Hotel" :
                GetHotelName(selectedHotelId))</DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem @onclick="() => SelectHotel(null)">Alle hoteller</DropdownItem>
                @foreach (var y in alleHoteller)
                {
                    <DropdownItem @onclick="() => SelectHotel(y.HotelId)">@y.HotelName</DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
    </div>

    <!-- Dropdown til rolle -->
    <div class="dropdownmenu">
        <Dropdown Color="DropdownColor.Secondary">
            <DropdownToggleButton>@(selectedYear.HasValue ? $"År {selectedYear}" : "År")</DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem @onclick="() => SelectYear(null)">Alle år</DropdownItem>
                <DropdownItem @onclick="() => SelectYear(1)">År 1</DropdownItem>
                <DropdownItem @onclick="() => SelectYear(2)">År 2</DropdownItem>
                <DropdownItem @onclick="() => SelectYear(3)">År 3</DropdownItem>
            </DropdownMenu>
        </Dropdown>
    </div>
    
    @if (selectedStudentIds.Any())
    {
        <!-- Knap til at tilføje et delmål-->
        <div class="addgoal-button">
            <Button class="btn btn-primary" @onclick="NavigateToAddGoal">Tilføj delmål</Button>
        </div>
    }

    <!-- Knap til eksport af elevoversigt. Fordi det er i en div skal hele diven have en class for at rykke til højre -->
    <div class="export-button">
        <Button class="btn btn-primary">Eksporter fil</Button>
    </div>
</div>

<!-- Tabel som laver en ny række for hver elev som indeholder navn, rolle og hotel. -->
<table>
    <tr>
        <th>Navn</th>
        <th>Hotel</th>
        <th>Status</th>
        <th>År</th>
        <th>Vælg:</th>
    </tr>
    
    @if (alleElever != null)
    {
        @foreach (var x in FiltreredElever)
        {
            <tr>
                <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.Name</td>
                <td @onclick="@(() => NavigateToElevPlan(x.Id))">@(GetHotelName(x.HotelId))</td>
                <td @onclick="@(() => NavigateToElevPlan(x.Id))">Status</td>
                <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.Year</td>
                <td>
                    <input type="checkbox"
                           checked="@selectedStudentIds.Contains(x.Id)"
                           @onchange="(e) => CheckboxValueChanged(x.Id, (bool) ((ChangeEventArgs)e).Value)"/>
                </td>
                
            </tr>
        }
    }
    else
    {
        <p>Kan ikke hente elever...</p>
    }
</table>

@code {

    // En variabel som gemmer det der bliver tastet ind i søgebaren
    private string searchText = string.Empty;

    private int? selectedYear = null;
    private int? selectedHotelId = null;
    private bool isSelected(int id) => selectedStudentId == id;
    private int? selectedStudentId = null;

    private bool isChecked;

    private List<ElevOversigtDTO> alleElever;
    private List<HotelNameDTO> alleHoteller;
    private HashSet<int> selectedStudentIds = new();

    // Filter til søgetekst og til valg af hotel
    private IEnumerable<ElevOversigtDTO> FiltreredElever =>
        alleElever.Where((a =>
            (string.IsNullOrWhiteSpace(searchText) ||
             a.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
            (!selectedHotelId.HasValue || a.HotelId == selectedHotelId) &&
            (!selectedYear.HasValue || a.Year == selectedYear)));

    protected override async Task OnInitializedAsync()
    {
        alleElever = await IBrugerService.GetElevOversigt();

        alleHoteller = await IHotelService.GetAllHotelNames();
    }

    private async Task NavigateToElevPlan(int studentId)
    {
        navMan.NavigateTo($"minelevplan/{studentId}");
    }

    private string GetHotelName(int? hotelId)
    {
        var hotel = alleHoteller.FirstOrDefault(h => h.HotelId == hotelId);
        return hotel?.HotelName ?? "Ukendt Hotel";
    }

    private void SelectHotel(int? hotelId)
    {
        selectedHotelId = hotelId;
    }

    private void NavigateToAddGoal()
    {
        navMan.NavigateTo("/tilføjdelmål");
    }

    private void SelectYear(int? year)
    {
        selectedYear = year;
    }

    private void CheckboxValueChanged(int studentId, bool value)
    {
        if (value)
        {
            selectedStudentIds.Add(studentId);
        }
        else
        {
            selectedStudentIds.Remove(studentId);
        }
    }

}