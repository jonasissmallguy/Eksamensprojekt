@using System.Reflection.Metadata
@using Core
@using Core.DTO.Goal
@using Client.Components

@inject NavigationManager navMan;
@inject IBruger IBrugerService;
@inject IHotel IHotelService;
@inject IGoal IGoalService;
@inject IAuth AuthService;


@page "/dashboard"
<h3>Dashboard</h3>

@if (alleElever != null)
{

    <div class="dashboard-topline">

        <!-- Div med en søgebar, dropdown menuer og knap til eksport af lister -->
        <div class="searchbar">
            <TextInput @bind-value="@searchText" Placeholder="Søg ved navn..."></TextInput>
        </div>

        @if (_currentUser.Rolle == "HR")
        {
            <!-- Dropdown til hotelvalg -->
            <div class="dropdownmenu">
                <Dropdown Color="DropdownColor.Secondary">
                    <DropdownToggleButton>@(selectedHotelId == null ? "Hotel" : GetHotelName(selectedHotelId))</DropdownToggleButton>
                    <DropdownMenu>
                        <DropdownItem @onclick="() => SelectHotel(null)">Alle hoteller</DropdownItem>
                        @foreach (var y in alleHoteller)
                        {
                            <DropdownItem @onclick="() => SelectHotel(y.Id)">@y.HotelNavn</DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            </div>
        }
        else
        {
            <div class="dropdownmenu">
                <Dropdown Color="DropdownColor.Secondary">
                    <DropdownToggleButton>@(GetCurrentUserHotelName())</DropdownToggleButton>
                </Dropdown>
            </div>
        }

        <!-- Dropdown til rolle -->
        <div class="dropdownmenu">
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>@(string.IsNullOrEmpty(selectedYear) ? "År" : selectedYear)</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem @onclick="() => SelectYear(String.Empty)">Alle år</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectYear("År 1"))">År 1</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectYear("År 2"))">År 2</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectYear("År 3"))">År 3</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        <!-- Dropdown til skole -->
        <div class="dropdownmenu">
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>@(string.IsNullOrEmpty(selectedSkole) ? "Skole" : selectedSkole)</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem @onclick="() => SelectSkole(String.Empty)">Alle skoler</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectSkole("Kold Kollege"))">Kold Kollege</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectSkole("EUX Kronjylland"))">EUX Kronjylland</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectSkole("Hansted Kokkeskole"))">Hansted Kokkeskole</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        <!-- Dropdown til uddannelse -->
        <div class="dropdownmenu">
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>@(string.IsNullOrEmpty(selectedUddannelse) ? "Uddannelse" : selectedUddannelse)</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem @onclick="() => SelectUddannelse(String.Empty)">Alle uddannelser</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectUddannelse("EUX"))">EUX</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectUddannelse("Voksenelev"))">Voksenelev</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        <!-- Input til startdatofiltrering -->
        <div class="dropdownmenu">
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>Start</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem>
                        Start før:
                        <DateInput TValue="DateOnly?" @bind-Value="@selectedSkolestartBefore" Placeholder="Enter Date"/>
                    </DropdownItem>
                    <DropdownItem>
                        Start efter:
                        <DateInput TValue="DateOnly?" @bind-Value="@selectedSkolestartAfter" Placeholder="Enter Date"/>
                    </DropdownItem>
                    <DropdownItem>
                        <button class="btn btn-primary" @onclick="ResetStartDateFilters">Nulstil</button>
                    </DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        <!-- Input til slutdatofiltrering -->
        <div class="dropdownmenu">
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>Slut</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem>
                        Afslutter før:
                        <DateInput TValue="DateOnly?" @bind-Value="@selectedSkoleendBefore" Placeholder="Enter Date"/>
                    </DropdownItem>
                    <DropdownItem>
                        Afslutter efter:
                        <DateInput TValue="DateOnly?" @bind-Value="@selectedSkoleendAfter" Placeholder="Enter Date"/>
                    </DropdownItem>
                    <DropdownItem>
                        <button class="btn btn-primary" @onclick="ResetEndDateFilters">Nulstil</button>
                    </DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        @if (selectedStudentIds.Count == 1)
        {
            <!-- Knap til at tilføje et delmål-->
            <div class="addgoal-button">
                <Button class="btn btn-primary" @onclick="OpenModal">Tilføj delmål</Button>
            </div>
        }

        @if (selectedStudentIds.Any())
        {
            <!-- Knap til eksport af elevoversigt. Fordi det er i en div skal hele diven have en class for at rykke til højre -->
            <div class="export-button">
                <Button class="btn btn-primary">Eksporter fil</Button>
            </div>
        }

    </div>
    
    <!-- Tabel som laver en ny række for hver elev som indeholder navn, rolle og hotel. -->
    <table>
        <tr>
            <th>
                <input type="checkbox"
                       @onchange="ToggleSelectAll"
                       checked="@AreAllFilteredSelected"/>
            </th>
            <th>Navn</th>
            <th>Hotel</th>
            <th>Status</th>
            <th>År</th>
            <th>Skole</th>
            <th>Uddannelse</th>
            <th>Start</th>
            <th>Slut</th>
        </tr>
        @if (isLoading)
        {
            <p>Indlæser elever...</p>
        }
        else if (alleElever == null)
        {
            <p>Kan ikke indlæse elever...</p>
        }
        else
        {
            @foreach (var x in FiltreredElever)
            {
                <tr>
                    <td>
                        <input type="checkbox"
                               checked="@selectedStudentIds.Contains(x.Id)"
                               @onchange="(e) => CheckboxValueChanged(x.Id, (bool)((ChangeEventArgs)e).Value)"/>
                    </td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.Name</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.HotelNavn</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.CompletedGoals / @x.TotalGoals</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.Year</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.Skole</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.Uddannelse</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.StartDate</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.EndDate</td>

                </tr>
            }
        }
    </table>

    <ModalTilføjDelmål @ref="modalRef" Title="Tilføj delmål">
        <EditForm Model="newGoal" class="row p-3">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            
                <div class="row justify-content-center">
                    <div class="col-md-6 mb-3">
                        <label for="Titel">Titel:</label>
                        <InputText id="Titel" @bind-Value="newGoal.Title"
                                   placeholder="Skolenavn..." class="form-control"/>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-6 mb-3">
                        <label for="Beskrivelse">Beskrivelse:</label>
                        <InputTextArea id="Beskrivelse" @bind-Value="newGoal.Description"
                                       placeholder="Husk at tilføje adresse!" class="form-control"/>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-6 mb-3">
                        <label for="Status">Status:</label>
                        <InputText id="Status" @bind-Value="newGoal.Status"
                                   placeholder="Status" class="form-control"/>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-6 mb-3">
                        <label for="Semester">Semester:</label>
                        <InputSelect class="form-select" @bind-Value="newGoal.Semester">
                            @foreach (var yy in år)
                            {
                                <option value="@yy">@yy</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-6 mb-3">
                        <label for="SkoleStart">Skolestart</label>
                        <InputDate class="form-select" @bind-Value="newGoal.SkoleStart">
                        </InputDate>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-6 mb-3">
                        <label for="SkoleStart">Skoleafslutning</label>
                        <InputDate class="form-select" @bind-Value="newGoal.SkoleEnd">
                        </InputDate>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-6 mb-3">
                        <button class="btn btn-primary">Tilføj</button>
                    </div>
                </div>

        </EditForm>
    </ModalTilføjDelmål>

}

@code {

    // En variabel som gemmer det der bliver tastet ind i søgebaren
    private string searchText = string.Empty;

    private string selectedYear = String.Empty;
    private int? selectedHotelId = null;
    private bool isSelected(int id) => selectedStudentId == id;
    private int? selectedStudentId = null;
    private bool AreAllFilteredSelected => FiltreredElever.Any() && FiltreredElever.All(e => selectedStudentIds.Contains(e.Id));
    private string selectedSkole = String.Empty;
    private string selectedUddannelse = String.Empty;
    private int? _currentUserHotelId = null;

    private bool isChecked;

    private List<Forløb> selectedForløb = new();
    private List<ElevOversigtDTO> alleElever = new();
    private List<Hotel> alleHoteller = new();
    private HashSet<int> selectedStudentIds = new();
    private BrugerLoginDTO _currentUser;

    private DateOnly? selectedSkolestartBefore = null;
    private DateOnly? selectedSkolestartAfter = null;
    private DateOnly? selectedSkoleendBefore = null;
    private DateOnly? selectedSkoleendAfter = null;

    private bool isLoading = false;



    // Filter til søgetekst og til valg af hotel
    private IEnumerable<ElevOversigtDTO> FiltreredElever
    {
        get
        {
            var filtered = alleElever.Where((a =>
                (string.IsNullOrWhiteSpace(searchText) ||
                 a.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
                (!selectedHotelId.HasValue || a.HotelId == selectedHotelId) &&
                (string.IsNullOrEmpty(selectedYear) || a.Year == selectedYear) &&
                (string.IsNullOrEmpty(selectedSkole) || a.Skole == selectedSkole) &&
                (string.IsNullOrEmpty(selectedUddannelse) || a.Uddannelse == selectedUddannelse) &&
                (!selectedSkolestartBefore.HasValue || a.StartDate <= selectedSkolestartBefore) &&
                (!selectedSkolestartAfter.HasValue || a.StartDate >= selectedSkolestartAfter) &&
                (!selectedSkoleendBefore.HasValue || a.EndDate <= selectedSkoleendBefore) &&
                (!selectedSkoleendAfter.HasValue || a.EndDate >= selectedSkoleendAfter)));

            return filtered;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            alleElever = await IBrugerService.GetElevOversigt() ?? new List<ElevOversigtDTO>();
            Console.WriteLine($"Number of students retrieved: {alleElever.Count}");

            alleHoteller = await IHotelService.GetHotels();

            alleTyper = await IGoalService.GetAllGoalTypes();

            _currentUser = await AuthService.GetBruger();

            var _allUsers = await IBrugerService.GetAllUsers();

            var matchingUser = _allUsers.FirstOrDefault(u => u.Id == _currentUser.Id);

            if ((matchingUser != null) && (_currentUser.Rolle != "HR"))
            {
                _currentUserHotelId = matchingUser.HotelId;
                selectedHotelId = matchingUser.HotelId;
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Ensure UI updates
        }
    }

    private string GetCurrentUserHotelName()
    {
        var hotel = alleHoteller.FirstOrDefault(h => h.Id == _currentUserHotelId);
        return hotel?.HotelNavn ?? "Ukendt Hotel";
    }

    private async Task NavigateToElevPlan(int studentId)
    {
        navMan.NavigateTo($"minelevplan/{studentId}");
    }

    private string GetHotelName(int? hotelId)
    {
        var hotel = alleHoteller.FirstOrDefault(h => h.Id == hotelId);
        return hotel?.HotelNavn ?? "Ukendt Hotel";
    }

    private void SelectHotel(int? hotelId)
    {
        selectedHotelId = hotelId;
    }

    private void SelectSkole(string skole)
    {
        selectedSkole = skole;
    }

    private void SelectUddannelse(string uddannelse)
    {
        selectedUddannelse = uddannelse;
    }

    private void NavigateToAddGoal()
    {
        navMan.NavigateTo("/tilføjdelmål");
    }

    private void SelectYear(string year)
    {
        selectedYear = year;
    }

    private void CheckboxValueChanged(int studentId, bool value)
    {
        if (value)
        {
            selectedStudentIds.Add(studentId);
        }
        else
        {
            selectedStudentIds.Remove(studentId);
        }

        LogSelectedStudents();
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        bool shouldSelectAll = (bool)e.Value;

        if (shouldSelectAll)
        {
            foreach (var elev in FiltreredElever)
            {
                selectedStudentIds.Add(elev.Id);
            }
        }
        else
        {
            foreach (var elev in FiltreredElever)
            {
                selectedStudentIds.Remove(elev.Id);
            }
        }
    }

    //Herunder koden til tilføj delmål
    private GoalCreationDTO newGoal = new();

    private List<GoalNameDTO> alleTyper = new();

    private int? selectedGoalId = null;

    private string[] år = { "År 1", "År 2", "År 3" };
    private string[] skole = { "Kold Kollege", "EUX Kronjylland", "Hansted Kokkeskole" };
    private string[] uddannelse = { "EUX", "Voksenelev" };

    private string GetGoalName(int? goalId)
    {
        var goal = alleTyper.FirstOrDefault(t => t.GoalId == goalId);
        return goal?.GoalName ?? "Ukendt";
    }

    private void SelectType(int? goalId)
    {
        selectedGoalId = goalId;
    }

    private void ResetStartDateFilters()
    {
        selectedSkolestartBefore = null;
        selectedSkolestartAfter = null;
    }

    private void ResetEndDateFilters()
    {
        selectedSkoleendBefore = null;
        selectedSkoleendAfter = null;
    }


    // Herunder kode til Modaldialog

    private ModalTilføjDelmål? modalRef;

    private void OpenModal()
    {
        modalRef?.Open();
    }

    // Lille sag der checker hvilke elever der er tjekket af
    private void LogSelectedStudents()
    {
        var selected = alleElever
            .Where(e => selectedStudentIds.Contains(e.Id))
            .Select(e => $"{e.Id}: {e.Name}")
            .ToList();

        Console.WriteLine("Valgte elever:");
        foreach (var elev in selected)
        {
            Console.WriteLine(elev);
        }
    }


}