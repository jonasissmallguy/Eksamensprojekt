@using Core
@using Client.Components.Delmål

@inject NavigationManager navMan;
@inject IBruger IBrugerService;
@inject IHotel IHotelService;
@inject IAuth AuthService;


@page "/dashboard"
@if (isLoading)
{
    <p>Indlæser elever...</p>
}
else if (alleElever == null)
{
    <p>Kunne ikke indlæse elever.</p>
}
else
{
    <h3>Dashboard</h3>
    <div class="dashboard-topline">

        <!-- Div med en søgebar, dropdown menuer og knap til eksport af lister -->
        <div class="searchbar">
            <TextInput @bind-value="@searchText" Placeholder="Søg ved navn..."></TextInput>
        </div>

        @if (_currentUser.Rolle == "HR")
        {
            <!-- Dropdown til hotelvalg -->
            <div class="dropdownmenu">
                <Dropdown Color="DropdownColor.Secondary">
                    <DropdownToggleButton>@(selectedHotelId == null ? "Hotel" : GetHotelName(selectedHotelId))</DropdownToggleButton>
                    <DropdownMenu>
                        <DropdownItem @onclick="() => SelectHotel(null)">Alle hoteller</DropdownItem>
                        @foreach (var y in alleHoteller)
                        {
                            <DropdownItem @onclick="() => SelectHotel(y.Id)">@y.HotelNavn</DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            </div>
            <!-- Dropdown til regionvalg -->
            <div class="dropdownmenu">
                <Dropdown Color="DropdownColor.Secondary">
                    <DropdownToggleButton>@(string.IsNullOrEmpty(selectedRegion) ? "Region" : selectedRegion)</DropdownToggleButton>
                    <DropdownMenu>
                        <DropdownItem @onclick="() => SelectRegion(String.Empty)">Alle regioner</DropdownItem>
                        <DropdownItem @onclick="@(() => SelectRegion("Jylland"))">Jylland</DropdownItem>
                        <DropdownItem @onclick="@(() => SelectRegion("Fyn"))">Fyn</DropdownItem>
                        <DropdownItem @onclick="@(() => SelectRegion("Sjælland"))">Sjælland</DropdownItem>
                    </DropdownMenu>
                </Dropdown>
            </div>
        }
        else
        {
            <div class="dropdownmenu">
                <Dropdown Color="DropdownColor.Secondary">
                    <DropdownToggleButton>@(GetCurrentUserHotelName())</DropdownToggleButton>
                </Dropdown>
            </div>
        }

        <!-- Dropdown til rolle -->
        <div class="dropdownmenu">
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>@(string.IsNullOrEmpty(selectedYear) ? "År" : selectedYear)</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem @onclick="() => SelectYear(String.Empty)">Alle år</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectYear("År 1"))">År 1</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectYear("År 2"))">År 2</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectYear("År 3"))">År 3</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        <!-- Dropdown til skole -->
        <div class="dropdownmenu">
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>@(string.IsNullOrEmpty(selectedSkole) ? "Skole" : selectedSkole)</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem @onclick="() => SelectSkole(String.Empty)">Alle skoler</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectSkole("Kold Kollege"))">Kold Kollege</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectSkole("EUX Kronjylland"))">EUX Kronjylland</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectSkole("Hansted Kokkeskole"))">Hansted Kokkeskole</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        <!-- Dropdown til uddannelse -->
        <div class="dropdownmenu">
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>@(string.IsNullOrEmpty(selectedUddannelse) ? "Uddannelse" : selectedUddannelse)</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem @onclick="() => SelectUddannelse(String.Empty)">Alle uddannelser</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectUddannelse("EUX"))">EUX</DropdownItem>
                    <DropdownItem @onclick="@(() => SelectUddannelse("Voksenelev"))">Voksenelev</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        <!-- Input til startdatofiltrering -->
        <div class="dropdownmenu">
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>Start</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem>
                        Start før:
                        <DateInput TValue="DateOnly?" @bind-Value="@selectedSkolestartBefore" Placeholder="Enter Date"/>
                    </DropdownItem>
                    <DropdownItem>
                        Start efter:
                        <DateInput TValue="DateOnly?" @bind-Value="@selectedSkolestartAfter" Placeholder="Enter Date"/>
                    </DropdownItem>
                    <DropdownItem>
                        <button class="btn btn-primary" @onclick="ResetStartDateFilters">Nulstil</button>
                    </DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        <!-- Input til slutdatofiltrering -->
        <div class="dropdownmenu">
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>Slut</DropdownToggleButton>
                <DropdownMenu>
                    <DropdownItem>
                        Afslutter før:
                        <DateInput TValue="DateOnly?" @bind-Value="@selectedSkoleendBefore" Placeholder="Enter Date"/>
                    </DropdownItem>
                    <DropdownItem>
                        Afslutter efter:
                        <DateInput TValue="DateOnly?" @bind-Value="@selectedSkoleendAfter" Placeholder="Enter Date"/>
                    </DropdownItem>
                    <DropdownItem>
                        <button class="btn btn-primary" @onclick="ResetEndDateFilters">Nulstil</button>
                    </DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>

        @if (selectedStudentIds.Count == 1 && _currentUser.Rolle == "Køkkenchef")
        {
            <!-- Knap til at tilføje et delmål-->
            <div class="addgoal-button">
                <Button class="btn btn-primary" @onclick="OpenModal">Tilføj delmål</Button>
            </div>
        }
        @if (selectedStudentIds.Any() && _currentUser.Rolle == "HR")
        {
            <!-- Knap til eksport af elevoversigt. Fordi det er i en div skal hele diven have en class for at rykke til højre -->
            <div class="export-button">
                <Button @onclick="() => SendExcelFile(selectedStudentIds)" class="btn btn-primary">Eksporter fil</Button>
            </div>
        }

    </div>

        <!-- Tabel som laver en ny række for hver elev som indeholder navn, rolle og hotel. -->
        <table>
            <tr>
                @if (_currentUser.Rolle == "HR" || _currentUser.Rolle == "Køkkenhef")
                {
                    <th>
                        <input type="checkbox"
                               @onchange="ToggleSelectAll"
                               checked="@AreAllFilteredSelected"/>
                    </th>
                }
                <th>Navn</th>
                <th>Hotel</th>
                <th>Status</th>
                <th>År</th>
                <th>Skole</th>
                <th>Uddannelse</th>
                <th>Start</th>
                <th>Slut</th>
            </tr>
            @foreach (var x in FiltreredElever)
            {
                <tr>
                    @if (_currentUser.Rolle == "HR" || _currentUser.Rolle == "Køkkenhef")
                    {
                        <td>
                            <input type="checkbox"
                                   checked="@selectedStudentIds.Contains(x.Id)"
                                   @onchange="(e) => CheckboxValueChanged(x.Id, (bool)((ChangeEventArgs)e).Value)"/>
                        </td>
                    }
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.Name</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.HotelNavn</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.CompletedGoals / @x.TotalGoals</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.Year</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.Skole</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.Uddannelse</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.StartDate</td>
                    <td @onclick="@(() => NavigateToElevPlan(x.Id))">@x.EndDate</td>

            </tr>
        }
    </table>

    <TilføjDelmålComponent @ref="addGoalModalRef"
                           StudentId="@selectedStudentIds.FirstOrDefault()"
                           ElevPlan="@elevPlan"
                           OnGoalAdded="@OnGoalAdded"
                           ShowSchoolSection="true"
                           WorkInMemory="false"/>

}

@code {
    
    private bool isLoading = false;

    [CascadingParameter] private BrugerLoginDTO _currentUser { get; set; }
    
    //Eleven
    private User elev;
    private Plan? elevPlan;

    //Modaldialog
    private TilføjDelmålComponent addGoalModalRef;
    
    // En variabel som gemmer det der bliver tastet ind i søgebaren
    private string searchText = string.Empty;

    private string selectedYear = String.Empty;
    private int? selectedHotelId = null;
    private bool AreAllFilteredSelected => FiltreredElever.Any() && FiltreredElever.All(e => selectedStudentIds.Contains(e.Id));
    private string selectedSkole = String.Empty;
    private string selectedRegion = String.Empty;
    private string selectedUddannelse = String.Empty;
    
    private List<ElevOversigtDTO> alleElever = new();
    private List<Hotel> alleHoteller = new();
    private HashSet<int> selectedStudentIds = new();

    private DateOnly? selectedSkolestartBefore = null;
    private DateOnly? selectedSkolestartAfter = null;
    private DateOnly? selectedSkoleendBefore = null;
    private DateOnly? selectedSkoleendAfter = null;
    

    // Filter til søgetekst og til valg af hotel
    private IEnumerable<ElevOversigtDTO> FiltreredElever
    {
        get
        {
            var filtered = alleElever.Where((a =>
                (string.IsNullOrWhiteSpace(searchText) ||
                 a.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
                (!selectedHotelId.HasValue || a.HotelId == selectedHotelId) &&
                (string.IsNullOrEmpty(selectedYear) || a.Year == selectedYear) &&
                (string.IsNullOrEmpty(selectedSkole) || a.Skole == selectedSkole) &&
                (string.IsNullOrEmpty(selectedUddannelse) || a.Uddannelse == selectedUddannelse) &&
                (!selectedSkolestartBefore.HasValue || a.StartDate <= selectedSkolestartBefore) &&
                (!selectedSkolestartAfter.HasValue || a.StartDate >= selectedSkolestartAfter) &&
                (!selectedSkoleendBefore.HasValue || a.EndDate <= selectedSkoleendBefore) &&
                (!selectedSkoleendAfter.HasValue || a.EndDate >= selectedSkoleendAfter) &&
                (string.IsNullOrEmpty(selectedRegion) || GetHotelRegion(a.HotelId) == selectedRegion)));

            return filtered;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        _currentUser = await AuthService.GetBruger();

        //Navigation
        if (_currentUser == null)
        {
            navMan.NavigateTo("login/dashboard");
            return;
        }

        if (_currentUser.Rolle == "Elev")
        {
            navMan.NavigateTo("");
        }
        
        //HR ser alle elever
        if (_currentUser.Rolle == "HR")
        {
            alleElever = await IBrugerService.GetElevOversigt();
        }

        //Køkkenchef og Kok ser kun fra eget hotel 
        if (_currentUser.Rolle == "Køkkenchef" || _currentUser.Rolle == "Kok")
        {
            alleElever = await IBrugerService.GetElevOversigtByHotelId(_currentUser.HotelId);
            selectedHotelId = _currentUser.HotelId;
        }
        
        alleHoteller = await IHotelService.GetHotels();
        isLoading = false;
    }
    
    //Navigering til elevplan
    private void NavigateToElevPlan(int studentId)
    {
        navMan.NavigateTo($"minelevplan/{studentId}");
    }

    //Navigering til tilføj delmål
    private void NavigateToAddGoal()
    {
        navMan.NavigateTo("/tilføjdelmål");
    }
    
    private string GetHotelRegion(int? hotelId)
    {
        var hotel = alleHoteller.FirstOrDefault(h => h.Id == hotelId.Value);
        return hotel?.Region ?? "Ukendt region";
    }

    
    //Sætter filter på hotel
    private string GetCurrentUserHotelName()
    {
        var hotel = alleHoteller.FirstOrDefault(h => h.Id == _currentUser.HotelId);
        return hotel?.HotelNavn ?? "Ukendt Hotel";
    }
    
    //Hotel for HR
    private string GetHotelName(int? hotelId)
    {
        var hotel = alleHoteller.FirstOrDefault(h => h.Id == hotelId);
        return hotel?.HotelNavn ?? "Ukendt Hotel";
    }

    //Sætter vores instans variabler med værdierne fra dropdown
    private void SelectHotel(int? hotelId) => selectedHotelId = hotelId;
    private void SelectSkole(string skole) => selectedSkole = skole;
    private void SelectUddannelse(string uddannelse) => selectedUddannelse = uddannelse;
    private void SelectRegion(string region) => selectedRegion = region;
    private void SelectYear(string year) => selectedYear = year;
    
    //Resetter filter på start og slut
    private void ResetStartDateFilters()
    {
        selectedSkolestartBefore = null;
        selectedSkolestartAfter = null;
    }

    //Resetter filter på slutdato
    private void ResetEndDateFilters()
    {
        selectedSkoleendBefore = null;
        selectedSkoleendAfter = null;
    }
    
    //Checkbox af 1
    private void CheckboxValueChanged(int studentId, bool value)
    {
        if (value)
        {
            selectedStudentIds.Add(studentId);
        }
        else
        {
            selectedStudentIds.Remove(studentId);
        }
    }

    //Checkbox af alle
    private void ToggleSelectAll(ChangeEventArgs e)
    {
        bool shouldSelectAll = (bool)e.Value;

        if (shouldSelectAll)
        {
            foreach (var elev in FiltreredElever)
            {
                selectedStudentIds.Add(elev.Id);
            }
        }
        else
        {
            foreach (var elev in FiltreredElever)
            {
                selectedStudentIds.Remove(elev.Id);
            }
        }
    }
    
    //Sender mail med excelfil over valgte elever 
    private async Task SendExcelFile(HashSet<int> hashSet)
    {
       await IBrugerService.SendEmail(hashSet, _currentUser.Email);
    }
    
    private async Task OpenModal()
    {
        var elevId = selectedStudentIds.FirstOrDefault();
        if (elevId == 0) return;

        elev = await IBrugerService.GetBrugerById(elevId);
        elevPlan = elev.ElevPlan;

        addGoalModalRef?.Open();
    }

    private async Task OnGoalAdded()
    {
        StateHasChanged();
    }
}
