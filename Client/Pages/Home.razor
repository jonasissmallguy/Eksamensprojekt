@using Core

@inject IAuth AuthService;
@inject IBruger IBrugerService;
@inject NavigationManager navMan;
@inject IGoal IGoalService;

@page "/"

<h3 class="page-title">Oversigt</h3>

<div class="dashboard-grid">
    @if (_currentUser?.Rolle == "Elev")
    {
        <div class="dashboard-card">
            <h5 class="card-title">Velkomst Boks</h5>
            <p>Velkommen til din side @_currentUser?.FirstName</p>
        </div>

        <div class="dashboard-card">
            <h5 class="card-title">Kommende Skoleophold</h5>
            @if (_elevSkoleophold != null && _elevSkoleophold.Any())
            {
                <ul class="list-reset">
                    @foreach (var ophold in _elevSkoleophold)
                    {
                        <li>
                            @ophold.Title – @ophold.SkoleStart?.ToShortDateString() til @ophold.SkoleEnd?.ToShortDateString()
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>Du har ingen planlagte skoleophold</p>
            }
        </div>

        <div class="dashboard-card">
            <h5 class="card-title">Aktive Delmål</h5>
            @if (_elevDelmål != null && _elevDelmål.Any())
            {
                <ul class="list-reset">
                    @foreach (var mål in _elevDelmål)
                    {
                        <li>@mål.Title – Status: @mål.Status</li>
                    }
                </ul>
            }
            else
            {
                <p>Du har ingen aktive delmål</p>
            }
        </div>

        <div class="dashboard-card">
            <h5 class="card-title">Kommende Kurser</h5>
            @if (_elevKurser != null && _elevKurser.Any())
            {
                <ul class="list-reset">
                    @foreach (var kursus in _elevKurser)
                    {
                        <li>@kursus.Title – Deadline: @kursus.DeadLineAt.ToShortDateString()</li>
                    }
                </ul>
            }
            else
            {
                <p>Der er ingen kommende kurser i din plan</p>
            }
        </div>
    }
    else if (_currentUser?.Rolle == "Køkkenchef")
    {
        <div class="dashboard-card">
            <h5 class="card-title">Kommende Kurser (År @(_bruger?.ForløbId))</h5>
            <p>Oversigt over aktive kurser for det aktuelle år</p>
            @if (_upcomingCourses != null && _upcomingCourses.Any())
            {
                <ul class="list-reset">
                    @foreach (var course in _upcomingCourses)
                    {
                        <li>Kursus: @course.Title – Deadline: @course.DeadLineAt.ToShortDateString()</li>
                    }
                </ul>
            }
            else
            {
                <p>Ingen kurser fundet for dette år</p>
            }
        </div>

        <div class="dashboard-card">
            <h5 class="card-title">Kommende Skoleophold</h5>
            <p>Kommende skoleophold for dine elever</p>
            @if (_outOfHouse != null && _outOfHouse.Count > 0)
            {
                <ul class="list-reset">
                    @foreach (var g in _outOfHouse)
                    {
                        <li>
                            Skoleophold: @g.Title – Start: @g.SkoleStart?.ToShortDateString() - Slut: @g.SkoleEnd?.ToShortDateString()
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>Ingen planlagte skoleophold</p>
            }
        </div>

        <div class="dashboard-card">
            <h5 class="card-title">Manglende kurser</h5>
            <p>Dine elevers manglende kurser</p>
            @if (_missingCourses != null)
            {
                <ul class="list-reset">
                    @foreach (var g in _missingCourses)
                    {
                        <li>Kursus: @g.Title Elev: @_bruger.FirstName @_bruger.LastName</li>
                    }
                </ul>
            }
        </div>

        <div class="dashboard-card">
            <h5 class="card-title">Elevers mål der afventer dine godkendelser</h5>
            <p>Du har følgende notifikationer</p>
            @if (_awaitingApproval != null)
            {
                <ul class="list-reset">
                    @foreach (var g in _awaitingApproval)
                    {
                        <li>
                            Delmål: @g.Title
                            <button class="btn-approve" @onclick="() => ApproveGoal(g)">Godkend mål</button>
                        </li>
                    }
                </ul>
            }
        </div>
    }
</div>

@code {
    private BrugerLoginDTO _currentUser;
    private User _bruger;
    private List<Goal> _awaitingApproval;
    private List<Goal> _missingCourses;
    private List<Goal> _outOfHouse;
    private List<Goal> _upcomingCourses;

    // Elev-data
    private List<Goal> _elevSkoleophold;
    private List<Goal> _elevDelmål;
    private List<Goal> _elevKurser;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await AuthService.GetBruger();

        if (_currentUser == null)
        {
            navMan.NavigateTo("login/");
            return;
        }

        _bruger = await IBrugerService.GetUserById(_currentUser.Id);

        if (_currentUser.Rolle == "HR" || _currentUser.Rolle == "Kok")
        {
            navMan.NavigateTo("/Dashboard");
            return;
        }

        if (_currentUser.Rolle == "Køkkenchef")
        {
            _awaitingApproval = await IGoalService.GetAwaitingApproval();
            _missingCourses = await IGoalService.GetMissingCourses(_bruger);
            _outOfHouse = await IGoalService.GetOutOfHouse();

            var allGoals = await IGoalService.GetAllGoalsForBruger(_bruger);
            _upcomingCourses = allGoals
                .Where(g => g.Type == "Kursus" && g.Status == "Active")
                .Where(g => g.Semester == "1" || g.Semester == "2" || g.Semester == "3")
                .Where(g => g.ForløbId == _bruger.ForløbId)
                .OrderBy(g => g.Semester)
                .ThenBy(g => g.DeadLineAt)
                .ToList();
        }

        if (_currentUser.Rolle == "Elev")
        {
            var elevGoals = await IGoalService.GetAllGoalsForBruger(_bruger);

            _elevSkoleophold = elevGoals
                .Where(g => g.Type == "Skole" && g.SkoleStart != null && g.SkoleStart >= DateTime.Now)
                .OrderBy(g => g.SkoleStart)
                .ToList();

            _elevDelmål = elevGoals
                .Where(g => g.Type == "Kompetence" && g.Status == "Active")
                .OrderBy(g => g.SortOrder)
                .ToList();

            _elevKurser = elevGoals
                .Where(g => g.Type == "Kursus" && g.Status == "Active" && g.DeadLineAt >= DateTime.Now)
                .OrderBy(g => g.DeadLineAt)
                .ToList();
        }
    }

    private async Task ApproveGoal(Goal goal)
    {
        await IGoalService.ConfirmGoalFromHomePage(goal);
        if (goal.Id != null)
        {
            _awaitingApproval = _awaitingApproval.Where(g => g.Id != goal.Id).ToList();
        }
    }
}
